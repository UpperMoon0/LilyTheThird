#:kivy 2.0.0
#:import os os
#:import LLMSelector views.components.llm_selector.LLMSelector

<ChatTab>:
    orientation: 'vertical'
    padding: dp(20)
    spacing: dp(15)
    # background_color: (0.97, 0.97, 0.97, 1) # Match CSS #f8f8f8

    # Avatar Section (Centered)
    BoxLayout:
        size_hint_y: None
        height: dp(300) # Fixed height for avatar
        padding: [0, dp(20), 0, dp(20)] # Padding top/bottom
        pos_hint: {'center_x': 0.5}
        canvas.before:
            StencilPush
            Ellipse:
                pos: self.center_x - dp(150), self.center_y - dp(150) # Centered position
                size: dp(300), dp(300) # Match fixed size
            StencilUse
        Image:
            source: 'assets/avatar.png' # Ensure this path is correct relative to main.py
            size_hint: None, None
            size: dp(300), dp(300)
            pos_hint: {'center_x': 0.5, 'center_y': 0.5}
            fit_mode: 'fill' # Replaced allow_stretch and keep_ratio
            canvas.after:
                StencilUnUse
                Ellipse:
                    pos: self.center_x - dp(150), self.center_y - dp(150)
                    size: dp(300), dp(300)
                StencilPop

    # Prompt Input Section
    BoxLayout:
        size_hint_y: None
        height: dp(40) # Fixed height for input row
        spacing: dp(10)
        TextInput:
            id: prompt_input # Keep id
            text: root.prompt_text
            hint_text: "Initializing..." if not root.backend_initialized else "Enter your prompt..."
            disabled: not root.backend_initialized # Disable when not initialized
            size_hint_x: 0.9 # Take most of the width
            multiline: False
            font_size: '14sp' # Match CSS
            # font_name: 'Arial' # Kivy might need the font file specified
            on_text_validate: root.send_prompt() # Send on Enter key
        Button:
            id: record_button # Keep id
            disabled: not root.backend_initialized # Disable when not initialized
            size_hint_x: None
            width: dp(50) # Match CSS width
            on_press: root.toggle_recording()
            background_normal: '' # Remove default button background
            background_color: (0.94, 0.94, 0.94, 1) if not root.is_recording else (1, 0.86, 0.86, 1) # Match CSS colors
            Image:
                source: root.record_button_icon # Dynamically update icon
                size: dp(30), dp(30)
                center_x: self.parent.center_x
                center_y: self.parent.center_y
                fit_mode: 'fill' # Replaced allow_stretch

    # Response Box Section
    ScrollView:
        id: response_scroll # Add id for scrolling
        size_hint_y: 1 # Take remaining vertical space
        do_scroll_x: False
        bar_width: dp(10) # Make scrollbar visible
        scroll_type: ['bars', 'content']
        Label:
            id: response_label # Change id to match python code
            text: root.response_text
            markup: True # Enable Kivy markup (like [b]...[/b])
            size_hint_y: None
            height: self.texture_size[1] # Adjust height to text content
            padding: dp(10), dp(10)
            font_size: '14sp'
            text_size: self.width, None # Enable text wrapping
            valign: 'top' # Align text to the top

    # Controls Section
    BoxLayout:
        size_hint_y: None
        height: self.minimum_height # Adjust height based on content
        orientation: 'vertical'
        spacing: dp(10)
        padding: [dp(10), dp(10)] # Padding around controls

        # Use the reusable LLMSelector component
        LLMSelector:
            # Bind component properties to the root (ChatTab) properties
            selected_provider: root.selected_provider
            selected_model: root.selected_model
            llm_providers: root.llm_providers
            llm_models: root.llm_models
            # RESTORED explicit bindings to ensure root properties are updated
            on_selected_provider: root.selected_provider = self.selected_provider
            on_selected_model: root.selected_model = self.selected_model
            # Optional: Customize labels if needed, otherwise defaults are used
            # provider_label_text: "Chat LLM Provider:"
            # model_label_text: "Chat LLM Model:"

        # TTS Checkbox Row
        BoxLayout:
            size_hint_y: None
            height: dp(30)
            CheckBox:
                id: tts_checkbox
                active: root.tts_enabled
                size_hint_x: None
                width: dp(40)
                on_active: root.tts_enabled = self.active
            Label:
                text: "Enable TTS (TTS-Provider)" # Add provider name dynamically if needed
                size_hint_x: 1
                text_size: self.width, None
                halign: 'left'
                valign: 'middle'

        # Clear History Button Row
        BoxLayout:
            size_hint_y: None
            height: dp(40)
            padding: [0, dp(10), 0, 0] # Add some top padding
            Button:
                id: clear_history_button
                text: "Clear History"
                size_hint_x: None
                width: dp(200)
                pos_hint: {'center_x': 0.5}
                on_press: root.clear_history()
                font_size: '16sp'
                # background_color: (0, 0.47, 1, 1) # Match CSS #007bff (approx)
