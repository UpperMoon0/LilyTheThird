#:kivy 2.0.0
#:import os os
#:import CircularImage views.components.circular_image.CircularImage
#:import RGBStrip views.components.rgb_strip
#:import ActionsList views.components.actions_list.ActionsList
#:import ActionDetails views.components.action_details.ActionDetails
#:import ChatBoxSettings views.components.chat_box_settings.ChatBoxSettings
#:import ChatBox views.components.chat_box.ChatBox

<ChatTab>:
    orientation: 'vertical'
    padding: dp(10) # Adjusted padding
    spacing: dp(10) # Adjusted spacing

    # Add the RGB Strip at the very top
    RGBStrip:
        # Height is set in the component's Python code (3dp)
        # Width will automatically match the parent (ChatTab)

    # --- Row A: Avatar and Controls ---
    BoxLayout:
        id: row_a
        orientation: 'horizontal'
        size_hint_y: None
        height: dp(320) # Fixed height for the top section (adjust as needed)
        spacing: dp(10)

        # Column 1: Avatar (Using AnchorLayout for robust centering)
        AnchorLayout:
            id: col_1_avatar_anchor # Renamed id slightly
            anchor_x: 'center'
            anchor_y: 'center'
            size_hint_x: 0.4
            padding: dp(10) # Padding still applies

            CircularImage:
                source: 'assets/avatar.png'
                # Make it square and size based on available height
                size_hint: None, None
                # Calculate height based on parent's height minus padding
                # Note: parent is now AnchorLayout, height calculation remains similar conceptually
                # Let's tie it directly to the fixed height row_a minus padding for stability
                height: root.ids.row_a.height - dp(40) # row_a height - top/bottom padding of AnchorLayout - top/bottom padding of row_a
                width: self.height # Make it square
                # pos_hint no longer needed due to AnchorLayout

        # Column 2: Controls (Chat Controls + LLM Selector)
        BoxLayout:
            id: col_2_controls
            orientation: 'vertical'
            size_hint_x: 0.3 # Adjust size hint for the middle column
            # Make height wrap content instead of filling row_a
            size_hint_y: None
            height: self.minimum_height
            pos_hint: {'center_y': 0.5} # Center vertically in the row_a space
            spacing: dp(10)
            padding: dp(10) # Padding for the outer controls column

            # ChatBoxSettings now contains LLMSelector
            ChatBoxSettings:
                id: chat_controls
                # Pass down LLM related properties from ChatTab (root)
                llm_providers: root.llm_providers
                llm_models: root.llm_models
                selected_provider: root.selected_provider
                selected_model: root.selected_model
                # Pass down TTS related properties
                tts_enabled: root.tts_enabled
                selected_tts_model: root.selected_tts_model
                selected_tts_speaker: root.selected_tts_speaker # ADDED BINDING

                # Bind events from ChatBoxSettings to ChatTab's (root) methods or property changes
                on_clear_history: root.clear_chat_history()
                # When ChatBoxSettings dispatches 'on_llm_provider_changed_event', update root.selected_provider
                on_llm_provider_changed_event: root.selected_provider = args[1]
                # When ChatBoxSettings dispatches 'on_llm_model_changed_event', update root.selected_model
                on_llm_model_changed_event: root.selected_model = args[1]
                # Bind TTS property changes from ChatBoxSettings back to ChatTab
                on_tts_enabled: root.tts_enabled = args[1] # Assuming ChatBoxSettings dispatches this or it's a direct property bind
                on_selected_tts_model: root.selected_tts_model = args[1] # Assuming ChatBoxSettings dispatches this
                # Bind events for TTS model and speaker changes
                on_tts_model_changed_event: root.selected_tts_model = args[1]
                on_tts_speaker_changed_event: root.selected_tts_speaker = args[1] # ADDED EVENT BINDING


        # Column 3: Actions List
        ActionsList:
            id: actions_list # Add id to reference from python code
            size_hint_x: 0.3 # Adjust size hint for the right column
            # Height will match the row_a height implicitly
            on_action_selected: root.selected_action_data = args[1]


    # --- Row B: ChatBox and Action Details ---
    BoxLayout:
        id: row_b # New container for ChatBox and ActionDetails
        orientation: 'horizontal'
        size_hint_y: 1 # Let this row take the remaining vertical space
        spacing: dp(10) # Add spacing between ChatBox and ActionDetails

        ChatBox:
            id: chat_box # Keep id
            size_hint_x: 0.7 # 70% width
            # Bind ChatBox properties/events to ChatTab (root)
            backend_initialized: root.backend_initialized
            # Pass the prompt text argument from the event to the root method
            on_send_prompt: root.send_prompt(args[1]) # args[0] is the widget, args[1] is the prompt text
            on_toggle_recording: root.toggle_recording()

        ActionDetails:
            id: action_details # Add id for the new component
            size_hint_x: 0.3 # 30% width
            # Bind the action_data property to the root's selected_action_data
            action_data: root.selected_action_data
