#:kivy 2.0.0
#:import RGBStrip views.components.rgb_strip
#:import DiscordBotStatus views.components.discord_bot_status.DiscordBotStatus
#:import DiscordBotSettings views.components.discord_bot_settings.DiscordBotSettings

<DiscordTab>:
    orientation: 'vertical'
    padding: dp(20)
    spacing: dp(20)

    # Add the RGB Strip at the very top
    RGBStrip:
        # Height is set in the component's Python code (3dp)
        # Width will automatically match the parent (DiscordTab)

    # Main content area with two columns
    BoxLayout:
        orientation: 'horizontal'
        spacing: dp(20) # Spacing between the two columns
        size_hint_y: None
        height: self.minimum_height

        # Left Column: Discord Bot Status
        DiscordBotStatus:
            id: discord_bot_status
            size_hint_x: 0.4 # Adjust as needed, e.g. 0.5 for equal width
            # Bind properties from DiscordTab to DiscordBotStatus
            bot_status: root.bot_is_running # Assuming DiscordTab has a 'bot_is_running' property
            # The toggle_bot method in DiscordBotStatus will call root.toggle_bot()
            # This connection will be made in the Python file or can be direct if preferred
            # For now, the on_press in discord_bot_status.kv calls root.toggle_bot()
            # which needs to be a method in DiscordBotStatus that then calls a method in DiscordTab.
            # Let's assume DiscordBotStatus will have a method that calls root.toggle_bot()
            # and its internal 'toggle_button_text' and 'status_text' are managed by its 'bot_status' property.
            # The 'on_press: root.toggle_bot()' in DiscordBotStatus.kv should be changed to
            # 'on_press: root.parent_toggle_bot_method()' if we pass a callback,
            # or DiscordTab will update discord_bot_status.bot_status directly.
            # For now, we assume DiscordTab will update discord_bot_status.bot_status.
            # The on_press in DiscordBotStatus.kv will call its own toggle_bot method,
            # which in turn should trigger an event or call a callback in DiscordTab.
            # Let's make DiscordBotStatus.toggle_bot() call root.toggle_bot()
            # This means DiscordBotStatus needs a reference to root (DiscordTab) or a callback.
            # The simplest is that DiscordTab updates the 'bot_status' of 'discord_bot_status' instance.
            # And the button press in 'discord_bot_status' calls 'root.toggle_bot()'.

        # Right Column: Discord Bot Settings
        DiscordBotSettings:
            id: discord_bot_settings
            size_hint_x: 0.6 # Adjust as needed
            # Bind properties from DiscordTab to DiscordBotSettings
            discord_token: root.discord_token
            guild_id: root.guild_id
            channel_id: root.channel_id
            master_discord_id: root.master_discord_id
            lily_discord_id: root.lily_discord_id
            selected_provider: root.selected_provider
            selected_model: root.selected_model
            llm_providers: root.llm_providers
            llm_models: root.llm_models
            save_all_discord_settings_callback: root.save_all_discord_settings # Connect the callback

    # Message Section (Visibility controlled by opacity and disabled state)
    # This remains below the two-column layout
    BoxLayout:
        id: message_section
        orientation: 'vertical'
        size_hint_y: None
        height: self.minimum_height if root.message_section_visible else 0
        opacity: 1 if root.message_section_visible else 0
        disabled: not root.message_section_visible
        spacing: dp(15)
        padding: [dp(10), dp(10), dp(10), 0]

        TextInput:
            id: message_input
            text: root.message_text
            hint_text: "Type your message here..."
            size_hint_x: None
            width: dp(300)
            pos_hint: {'center_x': 0.5}
            size_hint_y: None
            height: dp(40)
            multiline: False
            font_size: '14sp'
            on_text: root.message_text = self.text

        BoxLayout:
            size_hint_x: None
            width: self.minimum_width
            pos_hint: {'center_x': 0.5}
            size_hint_y: None
            height: dp(40)
            Button:
                id: send_message_button
                text: "Send Message"
                size_hint: None, None
                size: dp(200), dp(40)
                pos_hint: {'center_x': 0.5}
                on_press: root.send_message()
                font_size: '16sp'

    # Add a spacer to push content upwards if needed
    Widget:
        size_hint_y: 1
